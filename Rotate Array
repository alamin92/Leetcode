//  class Solution {
//      public void rotate(int[] nums, int k) {
//          int n = nums.length;
//          int[] test = new int[n];
//          int x = 0;
//          //int y = k;
//          int s = n - k; // 7-3 = 4 want to copy from the last
//                  while(s < n){
//                      test[x] = nums[s];
//                      s++;
//                      x++;
//              }
//  // copy first n - k elements
//         int i = 0;
//         while (i < n - k) {
//             test[x] = nums[i];
//             i++;
//             x++;
//         }

//       for (int j = 0; j < n; j++) {
//             nums[j] = test[j];
//         }
//      }
//  }
//Another way
 class Solution {
     public void rotate(int[] nums, int k) {
         int n = nums.length;
         int[] test = new int[n];
         for(int i = 0; i<n; i++){
             test[(i+k)%n] = nums[i];
         }
         
         for (int i = 0; i < n; i++) {
            nums[i] = test[i];
        }
    }
}

// test -> 
// i nums[i] (i+k)%n
// 0	1	3	[ , , , 1, , , ] (0+3)%7 = 3
// 1	2	4	[ , , , 1, 2, , ] (1+3)%7 = 4
// 2	3	5	[ , , , 1, 2, 3, ] (2+3)%7 = 5
// 3	4	6	[ , , , 1, 2, 3, 4 ] (3+ 3)%7 = 6
// 4	5	0	[5, , , 1, 2, 3, 4] (4+ 3)% 7 = 0
// 5	6	1	[5,6, , 1, 2, 3, 4]
// 6	7	2	[5,6,7,1,2,3,4]
